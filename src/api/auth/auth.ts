/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Bluby API
 * Cloudflare Worker backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

/**
 * Create operation for /auth/login
 * @summary Create login
 */
export const postAuthLogin = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/auth/login`, method: 'POST', signal });
};

export const getPostAuthLoginMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError, void, TContext> => {
  const mutationKey = ['postAuthLogin'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, void> = () => {
    return postAuthLogin();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>;

export type PostAuthLoginMutationError = void;

/**
 * @summary Create login
 */
export const usePostAuthLogin = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postAuthLogin>>, TError, void, TContext> => {
  const mutationOptions = getPostAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Create operation for /auth/register
 * @summary Create register
 */
export const postAuthRegister = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/auth/register`, method: 'POST', signal });
};

export const getPostAuthRegisterMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError, void, TContext> => {
  const mutationKey = ['postAuthRegister'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRegister>>, void> = () => {
    return postAuthRegister();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRegister>>
>;

export type PostAuthRegisterMutationError = void;

/**
 * @summary Create register
 */
export const usePostAuthRegister = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<Awaited<ReturnType<typeof postAuthRegister>>, TError, void, TContext> => {
  const mutationOptions = getPostAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Create operation for /auth/logout
 * @summary Create logout
 */
export const postAuthLogout = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/auth/logout`, method: 'POST', signal });
};

export const getPostAuthLogoutMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError, void, TContext> => {
  const mutationKey = ['postAuthLogout'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogout>>, void> = () => {
    return postAuthLogout();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogout>>>;

export type PostAuthLogoutMutationError = void;

/**
 * @summary Create logout
 */
export const usePostAuthLogout = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postAuthLogout>>, TError, void, TContext> => {
  const mutationOptions = getPostAuthLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
