/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Bluby API
 * Cloudflare Worker backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

/**
 * Create operation for /auth/login
 * @summary Create login
 */
export const postAuthLogin = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/auth/login`, method: 'POST', signal });
};

export const getPostAuthLoginMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError, void, TContext> => {
  const mutationKey = ['postAuthLogin'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, void> = () => {
    return postAuthLogin();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>;

export type PostAuthLoginMutationError = void;

/**
 * @summary Create login
 */
export const usePostAuthLogin = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postAuthLogin>>, TError, void, TContext> => {
  const mutationOptions = getPostAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Create operation for /auth/register
 * @summary Create register
 */
export const postAuthRegister = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/auth/register`, method: 'POST', signal });
};

export const getPostAuthRegisterMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError, void, TContext> => {
  const mutationKey = ['postAuthRegister'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRegister>>, void> = () => {
    return postAuthRegister();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRegister>>
>;

export type PostAuthRegisterMutationError = void;

/**
 * @summary Create register
 */
export const usePostAuthRegister = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<Awaited<ReturnType<typeof postAuthRegister>>, TError, void, TContext> => {
  const mutationOptions = getPostAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Create operation for /auth/logout
 * @summary Create logout
 */
export const postAuthLogout = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/auth/logout`, method: 'POST', signal });
};

export const getPostAuthLogoutMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError, void, TContext> => {
  const mutationKey = ['postAuthLogout'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogout>>, void> = () => {
    return postAuthLogout();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogout>>>;

export type PostAuthLogoutMutationError = void;

/**
 * @summary Create logout
 */
export const usePostAuthLogout = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postAuthLogout>>, TError, void, TContext> => {
  const mutationOptions = getPostAuthLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/profiles/:userId
 * @summary Get a user profile by ID
 */
export const getV1ProfilesUserId = (userId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/profiles/${userId}`, method: 'GET', signal });
};

export const getGetV1ProfilesUserIdQueryKey = (userId: number) => {
  return [`/v1/profiles/${userId}`] as const;
};

export const getGetV1ProfilesUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1ProfilesUserId>>,
  TError = void,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1ProfilesUserId>>, TError, TData>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1ProfilesUserIdQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1ProfilesUserId>>> = ({ signal }) =>
    getV1ProfilesUserId(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1ProfilesUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1ProfilesUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ProfilesUserId>>
>;
export type GetV1ProfilesUserIdQueryError = void;

/**
 * @summary Get a user profile by ID
 */

export function useGetV1ProfilesUserId<
  TData = Awaited<ReturnType<typeof getV1ProfilesUserId>>,
  TError = void,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1ProfilesUserId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1ProfilesUserIdQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Partially update operation for /v1/profiles/:userId
 * @summary Update a user profile
 */
export const patchV1ProfilesUserId = (userId: number) => {
  return customInstance<void>({ url: `/v1/profiles/${userId}`, method: 'PATCH' });
};

export const getPatchV1ProfilesUserIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchV1ProfilesUserId>>,
    TError,
    { userId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchV1ProfilesUserId>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationKey = ['patchV1ProfilesUserId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchV1ProfilesUserId>>,
    { userId: number }
  > = (props) => {
    const { userId } = props ?? {};

    return patchV1ProfilesUserId(userId);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchV1ProfilesUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchV1ProfilesUserId>>
>;

export type PatchV1ProfilesUserIdMutationError = void;

/**
 * @summary Update a user profile
 */
export const usePatchV1ProfilesUserId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchV1ProfilesUserId>>,
    TError,
    { userId: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchV1ProfilesUserId>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationOptions = getPatchV1ProfilesUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/meals/
 * @summary Get meals
 */
export const getV1Meals = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/meals/`, method: 'GET', signal });
};

export const getGetV1MealsQueryKey = () => {
  return [`/v1/meals/`] as const;
};

export const getGetV1MealsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Meals>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Meals>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1MealsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Meals>>> = ({ signal }) =>
    getV1Meals(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Meals>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1MealsQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Meals>>>;
export type GetV1MealsQueryError = void;

/**
 * @summary Get meals
 */

export function useGetV1Meals<
  TData = Awaited<ReturnType<typeof getV1Meals>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Meals>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1MealsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/meals/
 * @summary Create meals
 */
export const postV1Meals = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/meals/`, method: 'POST', signal });
};

export const getPostV1MealsMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Meals>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Meals>>, TError, void, TContext> => {
  const mutationKey = ['postV1Meals'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Meals>>, void> = () => {
    return postV1Meals();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1MealsMutationResult = NonNullable<Awaited<ReturnType<typeof postV1Meals>>>;

export type PostV1MealsMutationError = void;

/**
 * @summary Create meals
 */
export const usePostV1Meals = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Meals>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Meals>>, TError, void, TContext> => {
  const mutationOptions = getPostV1MealsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/meals/:mealId
 * @summary Get specific meal
 */
export const getV1MealsMealId = (mealId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/meals/${mealId}`, method: 'GET', signal });
};

export const getGetV1MealsMealIdQueryKey = (mealId: number) => {
  return [`/v1/meals/${mealId}`] as const;
};

export const getGetV1MealsMealIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1MealsMealId>>,
  TError = void,
>(
  mealId: number,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getV1MealsMealId>>, TError, TData> }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1MealsMealIdQueryKey(mealId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1MealsMealId>>> = ({ signal }) =>
    getV1MealsMealId(mealId, signal);

  return { queryKey, queryFn, enabled: !!mealId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1MealsMealId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1MealsMealIdQueryResult = NonNullable<Awaited<ReturnType<typeof getV1MealsMealId>>>;
export type GetV1MealsMealIdQueryError = void;

/**
 * @summary Get specific meal
 */

export function useGetV1MealsMealId<
  TData = Awaited<ReturnType<typeof getV1MealsMealId>>,
  TError = void,
>(
  mealId: number,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getV1MealsMealId>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1MealsMealIdQueryOptions(mealId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve operation for /v1/meal_plans/
 * @summary Get meal_plans
 */
export const getV1MealPlans = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/meal_plans/`, method: 'GET', signal });
};

export const getGetV1MealPlansQueryKey = () => {
  return [`/v1/meal_plans/`] as const;
};

export const getGetV1MealPlansQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1MealPlans>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1MealPlans>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1MealPlansQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1MealPlans>>> = ({ signal }) =>
    getV1MealPlans(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1MealPlans>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1MealPlansQueryResult = NonNullable<Awaited<ReturnType<typeof getV1MealPlans>>>;
export type GetV1MealPlansQueryError = void;

/**
 * @summary Get meal_plans
 */

export function useGetV1MealPlans<
  TData = Awaited<ReturnType<typeof getV1MealPlans>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1MealPlans>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1MealPlansQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/meal_plans/
 * @summary Create meal_plans
 */
export const postV1MealPlans = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/meal_plans/`, method: 'POST', signal });
};

export const getPostV1MealPlansMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1MealPlans>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1MealPlans>>, TError, void, TContext> => {
  const mutationKey = ['postV1MealPlans'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1MealPlans>>, void> = () => {
    return postV1MealPlans();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1MealPlansMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1MealPlans>>
>;

export type PostV1MealPlansMutationError = void;

/**
 * @summary Create meal_plans
 */
export const usePostV1MealPlans = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1MealPlans>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<Awaited<ReturnType<typeof postV1MealPlans>>, TError, void, TContext> => {
  const mutationOptions = getPostV1MealPlansMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/meal_plans/:planId
 * @summary Get specific meal plan
 */
export const getV1MealPlansPlanId = (planId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/meal_plans/${planId}`, method: 'GET', signal });
};

export const getGetV1MealPlansPlanIdQueryKey = (planId: number) => {
  return [`/v1/meal_plans/${planId}`] as const;
};

export const getGetV1MealPlansPlanIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1MealPlansPlanId>>,
  TError = void,
>(
  planId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1MealPlansPlanId>>, TError, TData>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1MealPlansPlanIdQueryKey(planId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1MealPlansPlanId>>> = ({ signal }) =>
    getV1MealPlansPlanId(planId, signal);

  return { queryKey, queryFn, enabled: !!planId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1MealPlansPlanId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1MealPlansPlanIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1MealPlansPlanId>>
>;
export type GetV1MealPlansPlanIdQueryError = void;

/**
 * @summary Get specific meal plan
 */

export function useGetV1MealPlansPlanId<
  TData = Awaited<ReturnType<typeof getV1MealPlansPlanId>>,
  TError = void,
>(
  planId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1MealPlansPlanId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1MealPlansPlanIdQueryOptions(planId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve operation for /v1/pantry/
 * @summary Get pantry
 */
export const getV1Pantry = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/pantry/`, method: 'GET', signal });
};

export const getGetV1PantryQueryKey = () => {
  return [`/v1/pantry/`] as const;
};

export const getGetV1PantryQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Pantry>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Pantry>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1PantryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Pantry>>> = ({ signal }) =>
    getV1Pantry(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Pantry>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1PantryQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Pantry>>>;
export type GetV1PantryQueryError = void;

/**
 * @summary Get pantry
 */

export function useGetV1Pantry<
  TData = Awaited<ReturnType<typeof getV1Pantry>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Pantry>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1PantryQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/pantry/
 * @summary Create pantry
 */
export const postV1Pantry = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/pantry/`, method: 'POST', signal });
};

export const getPostV1PantryMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Pantry>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Pantry>>, TError, void, TContext> => {
  const mutationKey = ['postV1Pantry'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Pantry>>, void> = () => {
    return postV1Pantry();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1PantryMutationResult = NonNullable<Awaited<ReturnType<typeof postV1Pantry>>>;

export type PostV1PantryMutationError = void;

/**
 * @summary Create pantry
 */
export const usePostV1Pantry = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Pantry>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Pantry>>, TError, void, TContext> => {
  const mutationOptions = getPostV1PantryMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete operation for /v1/pantry/:itemId
 * @summary Remove a pantry item
 */
export const deleteV1PantryItemId = (itemId: number) => {
  return customInstance<void>({ url: `/v1/pantry/${itemId}`, method: 'DELETE' });
};

export const getDeleteV1PantryItemIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1PantryItemId>>,
    TError,
    { itemId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV1PantryItemId>>,
  TError,
  { itemId: number },
  TContext
> => {
  const mutationKey = ['deleteV1PantryItemId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1PantryItemId>>,
    { itemId: number }
  > = (props) => {
    const { itemId } = props ?? {};

    return deleteV1PantryItemId(itemId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV1PantryItemIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1PantryItemId>>
>;

export type DeleteV1PantryItemIdMutationError = void;

/**
 * @summary Remove a pantry item
 */
export const useDeleteV1PantryItemId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1PantryItemId>>,
    TError,
    { itemId: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteV1PantryItemId>>,
  TError,
  { itemId: number },
  TContext
> => {
  const mutationOptions = getDeleteV1PantryItemIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/friends/
 * @summary Get friends
 */
export const getV1Friends = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/friends/`, method: 'GET', signal });
};

export const getGetV1FriendsQueryKey = () => {
  return [`/v1/friends/`] as const;
};

export const getGetV1FriendsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Friends>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Friends>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1FriendsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Friends>>> = ({ signal }) =>
    getV1Friends(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Friends>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1FriendsQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Friends>>>;
export type GetV1FriendsQueryError = void;

/**
 * @summary Get friends
 */

export function useGetV1Friends<
  TData = Awaited<ReturnType<typeof getV1Friends>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Friends>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1FriendsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/friends/request/:userId
 * @summary Send friend request
 */
export const postV1FriendsRequestUserId = (userId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/friends/request/${userId}`, method: 'POST', signal });
};

export const getPostV1FriendsRequestUserIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1FriendsRequestUserId>>,
    TError,
    { userId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1FriendsRequestUserId>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationKey = ['postV1FriendsRequestUserId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1FriendsRequestUserId>>,
    { userId: number }
  > = (props) => {
    const { userId } = props ?? {};

    return postV1FriendsRequestUserId(userId);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1FriendsRequestUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1FriendsRequestUserId>>
>;

export type PostV1FriendsRequestUserIdMutationError = void;

/**
 * @summary Send friend request
 */
export const usePostV1FriendsRequestUserId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1FriendsRequestUserId>>,
    TError,
    { userId: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postV1FriendsRequestUserId>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationOptions = getPostV1FriendsRequestUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/friends/requests
 * @summary Get friends
 */
export const getV1FriendsRequests = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/friends/requests`, method: 'GET', signal });
};

export const getGetV1FriendsRequestsQueryKey = () => {
  return [`/v1/friends/requests`] as const;
};

export const getGetV1FriendsRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1FriendsRequests>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1FriendsRequests>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1FriendsRequestsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1FriendsRequests>>> = ({ signal }) =>
    getV1FriendsRequests(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1FriendsRequests>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1FriendsRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1FriendsRequests>>
>;
export type GetV1FriendsRequestsQueryError = void;

/**
 * @summary Get friends
 */

export function useGetV1FriendsRequests<
  TData = Awaited<ReturnType<typeof getV1FriendsRequests>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1FriendsRequests>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1FriendsRequestsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve operation for /v1/groups/
 * @summary Get groups
 */
export const getV1Groups = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/groups/`, method: 'GET', signal });
};

export const getGetV1GroupsQueryKey = () => {
  return [`/v1/groups/`] as const;
};

export const getGetV1GroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Groups>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Groups>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1GroupsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Groups>>> = ({ signal }) =>
    getV1Groups(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Groups>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1GroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Groups>>>;
export type GetV1GroupsQueryError = void;

/**
 * @summary Get groups
 */

export function useGetV1Groups<
  TData = Awaited<ReturnType<typeof getV1Groups>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Groups>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1GroupsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/groups/
 * @summary Create groups
 */
export const postV1Groups = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/groups/`, method: 'POST', signal });
};

export const getPostV1GroupsMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Groups>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Groups>>, TError, void, TContext> => {
  const mutationKey = ['postV1Groups'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Groups>>, void> = () => {
    return postV1Groups();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1GroupsMutationResult = NonNullable<Awaited<ReturnType<typeof postV1Groups>>>;

export type PostV1GroupsMutationError = void;

/**
 * @summary Create groups
 */
export const usePostV1Groups = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Groups>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Groups>>, TError, void, TContext> => {
  const mutationOptions = getPostV1GroupsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/groups/:groupId
 * @summary Get specific group
 */
export const getV1GroupsGroupId = (groupId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/groups/${groupId}`, method: 'GET', signal });
};

export const getGetV1GroupsGroupIdQueryKey = (groupId: number) => {
  return [`/v1/groups/${groupId}`] as const;
};

export const getGetV1GroupsGroupIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GroupsGroupId>>,
  TError = void,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1GroupsGroupId>>, TError, TData>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1GroupsGroupIdQueryKey(groupId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1GroupsGroupId>>> = ({ signal }) =>
    getV1GroupsGroupId(groupId, signal);

  return { queryKey, queryFn, enabled: !!groupId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GroupsGroupId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1GroupsGroupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GroupsGroupId>>
>;
export type GetV1GroupsGroupIdQueryError = void;

/**
 * @summary Get specific group
 */

export function useGetV1GroupsGroupId<
  TData = Awaited<ReturnType<typeof getV1GroupsGroupId>>,
  TError = void,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1GroupsGroupId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1GroupsGroupIdQueryOptions(groupId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve operation for /v1/ingredients/
 * @summary Get ingredients
 */
export const getV1Ingredients = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/ingredients/`, method: 'GET', signal });
};

export const getGetV1IngredientsQueryKey = () => {
  return [`/v1/ingredients/`] as const;
};

export const getGetV1IngredientsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Ingredients>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Ingredients>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1IngredientsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Ingredients>>> = ({ signal }) =>
    getV1Ingredients(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Ingredients>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1IngredientsQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Ingredients>>>;
export type GetV1IngredientsQueryError = void;

/**
 * @summary Get ingredients
 */

export function useGetV1Ingredients<
  TData = Awaited<ReturnType<typeof getV1Ingredients>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Ingredients>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1IngredientsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/ingredients/
 * @summary Create ingredients
 */
export const postV1Ingredients = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/ingredients/`, method: 'POST', signal });
};

export const getPostV1IngredientsMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Ingredients>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Ingredients>>, TError, void, TContext> => {
  const mutationKey = ['postV1Ingredients'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Ingredients>>, void> = () => {
    return postV1Ingredients();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1IngredientsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1Ingredients>>
>;

export type PostV1IngredientsMutationError = void;

/**
 * @summary Create ingredients
 */
export const usePostV1Ingredients = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Ingredients>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Ingredients>>, TError, void, TContext> => {
  const mutationOptions = getPostV1IngredientsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/ingredients/:ingredientId
 * @summary Get specific ingredient
 */
export const getV1IngredientsIngredientId = (ingredientId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/ingredients/${ingredientId}`, method: 'GET', signal });
};

export const getGetV1IngredientsIngredientIdQueryKey = (ingredientId: number) => {
  return [`/v1/ingredients/${ingredientId}`] as const;
};

export const getGetV1IngredientsIngredientIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1IngredientsIngredientId>>,
  TError = void,
>(
  ingredientId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV1IngredientsIngredientId>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1IngredientsIngredientIdQueryKey(ingredientId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1IngredientsIngredientId>>> = ({
    signal,
  }) => getV1IngredientsIngredientId(ingredientId, signal);

  return { queryKey, queryFn, enabled: !!ingredientId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1IngredientsIngredientId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1IngredientsIngredientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1IngredientsIngredientId>>
>;
export type GetV1IngredientsIngredientIdQueryError = void;

/**
 * @summary Get specific ingredient
 */

export function useGetV1IngredientsIngredientId<
  TData = Awaited<ReturnType<typeof getV1IngredientsIngredientId>>,
  TError = void,
>(
  ingredientId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV1IngredientsIngredientId>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1IngredientsIngredientIdQueryOptions(ingredientId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve operation for /v1/products/
 * @summary Get products
 */
export const getV1Products = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/products/`, method: 'GET', signal });
};

export const getGetV1ProductsQueryKey = () => {
  return [`/v1/products/`] as const;
};

export const getGetV1ProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Products>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Products>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1ProductsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Products>>> = ({ signal }) =>
    getV1Products(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Products>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1ProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Products>>>;
export type GetV1ProductsQueryError = void;

/**
 * @summary Get products
 */

export function useGetV1Products<
  TData = Awaited<ReturnType<typeof getV1Products>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Products>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1ProductsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/products/
 * @summary Create products
 */
export const postV1Products = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/products/`, method: 'POST', signal });
};

export const getPostV1ProductsMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Products>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Products>>, TError, void, TContext> => {
  const mutationKey = ['postV1Products'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Products>>, void> = () => {
    return postV1Products();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ProductsMutationResult = NonNullable<Awaited<ReturnType<typeof postV1Products>>>;

export type PostV1ProductsMutationError = void;

/**
 * @summary Create products
 */
export const usePostV1Products = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Products>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Products>>, TError, void, TContext> => {
  const mutationOptions = getPostV1ProductsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/products/:productId
 * @summary Get specific product
 */
export const getV1ProductsProductId = (productId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/products/${productId}`, method: 'GET', signal });
};

export const getGetV1ProductsProductIdQueryKey = (productId: number) => {
  return [`/v1/products/${productId}`] as const;
};

export const getGetV1ProductsProductIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1ProductsProductId>>,
  TError = void,
>(
  productId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsProductId>>, TError, TData>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1ProductsProductIdQueryKey(productId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1ProductsProductId>>> = ({ signal }) =>
    getV1ProductsProductId(productId, signal);

  return { queryKey, queryFn, enabled: !!productId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1ProductsProductId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1ProductsProductIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ProductsProductId>>
>;
export type GetV1ProductsProductIdQueryError = void;

/**
 * @summary Get specific product
 */

export function useGetV1ProductsProductId<
  TData = Awaited<ReturnType<typeof getV1ProductsProductId>>,
  TError = void,
>(
  productId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsProductId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1ProductsProductIdQueryOptions(productId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve operation for /v1/preferences/
 * @summary Get preferences
 */
export const getV1Preferences = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/preferences/`, method: 'GET', signal });
};

export const getGetV1PreferencesQueryKey = () => {
  return [`/v1/preferences/`] as const;
};

export const getGetV1PreferencesQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Preferences>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Preferences>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1PreferencesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Preferences>>> = ({ signal }) =>
    getV1Preferences(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Preferences>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1PreferencesQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Preferences>>>;
export type GetV1PreferencesQueryError = void;

/**
 * @summary Get preferences
 */

export function useGetV1Preferences<
  TData = Awaited<ReturnType<typeof getV1Preferences>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Preferences>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1PreferencesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update operation for /v1/preferences/
 * @summary Update preferences
 */
export const putV1Preferences = () => {
  return customInstance<void>({ url: `/v1/preferences/`, method: 'PUT' });
};

export const getPutV1PreferencesMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1Preferences>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof putV1Preferences>>, TError, void, TContext> => {
  const mutationKey = ['putV1Preferences'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putV1Preferences>>, void> = () => {
    return putV1Preferences();
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV1PreferencesMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV1Preferences>>
>;

export type PutV1PreferencesMutationError = void;

/**
 * @summary Update preferences
 */
export const usePutV1Preferences = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1Preferences>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<Awaited<ReturnType<typeof putV1Preferences>>, TError, void, TContext> => {
  const mutationOptions = getPutV1PreferencesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Create operation for /v1/preferences/
 * @summary Create preferences
 */
export const postV1Preferences = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/preferences/`, method: 'POST', signal });
};

export const getPostV1PreferencesMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Preferences>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Preferences>>, TError, void, TContext> => {
  const mutationKey = ['postV1Preferences'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Preferences>>, void> = () => {
    return postV1Preferences();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1PreferencesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1Preferences>>
>;

export type PostV1PreferencesMutationError = void;

/**
 * @summary Create preferences
 */
export const usePostV1Preferences = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Preferences>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Preferences>>, TError, void, TContext> => {
  const mutationOptions = getPostV1PreferencesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/recipes/
 * @summary Get recipes
 */
export const getV1Recipes = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/recipes/`, method: 'GET', signal });
};

export const getGetV1RecipesQueryKey = () => {
  return [`/v1/recipes/`] as const;
};

export const getGetV1RecipesQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Recipes>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Recipes>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1RecipesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Recipes>>> = ({ signal }) =>
    getV1Recipes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Recipes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1RecipesQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Recipes>>>;
export type GetV1RecipesQueryError = void;

/**
 * @summary Get recipes
 */

export function useGetV1Recipes<
  TData = Awaited<ReturnType<typeof getV1Recipes>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Recipes>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1RecipesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/recipes/
 * @summary Create recipes
 */
export const postV1Recipes = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/recipes/`, method: 'POST', signal });
};

export const getPostV1RecipesMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Recipes>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Recipes>>, TError, void, TContext> => {
  const mutationKey = ['postV1Recipes'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Recipes>>, void> = () => {
    return postV1Recipes();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1RecipesMutationResult = NonNullable<Awaited<ReturnType<typeof postV1Recipes>>>;

export type PostV1RecipesMutationError = void;

/**
 * @summary Create recipes
 */
export const usePostV1Recipes = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Recipes>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Recipes>>, TError, void, TContext> => {
  const mutationOptions = getPostV1RecipesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/recipes/:recipeId
 * @summary Get specific recipe
 */
export const getV1RecipesRecipeId = (recipeId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/recipes/${recipeId}`, method: 'GET', signal });
};

export const getGetV1RecipesRecipeIdQueryKey = (recipeId: number) => {
  return [`/v1/recipes/${recipeId}`] as const;
};

export const getGetV1RecipesRecipeIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1RecipesRecipeId>>,
  TError = void,
>(
  recipeId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1RecipesRecipeId>>, TError, TData>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1RecipesRecipeIdQueryKey(recipeId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1RecipesRecipeId>>> = ({ signal }) =>
    getV1RecipesRecipeId(recipeId, signal);

  return { queryKey, queryFn, enabled: !!recipeId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1RecipesRecipeId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1RecipesRecipeIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1RecipesRecipeId>>
>;
export type GetV1RecipesRecipeIdQueryError = void;

/**
 * @summary Get specific recipe
 */

export function useGetV1RecipesRecipeId<
  TData = Awaited<ReturnType<typeof getV1RecipesRecipeId>>,
  TError = void,
>(
  recipeId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1RecipesRecipeId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1RecipesRecipeIdQueryOptions(recipeId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
