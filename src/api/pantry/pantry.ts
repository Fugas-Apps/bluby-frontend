/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Bluby API
 * FastAPI backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get pantry items
 * @summary Get Pantry Items
 */
export const getPantryItems = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/pantry/`, method: 'GET', signal
    },
      );
    }
  

export const getGetPantryItemsQueryKey = () => {
    return [`/v1/pantry/`] as const;
    }

    
export const getGetPantryItemsQueryOptions = <TData = Awaited<ReturnType<typeof getPantryItems>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPantryItems>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPantryItemsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPantryItems>>> = ({ signal }) => getPantryItems(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPantryItems>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPantryItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getPantryItems>>>
export type GetPantryItemsQueryError = unknown


/**
 * @summary Get Pantry Items
 */

export function useGetPantryItems<TData = Awaited<ReturnType<typeof getPantryItems>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPantryItems>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPantryItemsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Add a new pantry item
 * @summary Add Pantry Item
 */
export const addPantryItem = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/pantry/`, method: 'POST', signal
    },
      );
    }
  


export const getAddPantryItemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPantryItem>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addPantryItem>>, TError,void, TContext> => {
    
const mutationKey = ['addPantryItem'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPantryItem>>, void> = () => {
          

          return  addPantryItem()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddPantryItemMutationResult = NonNullable<Awaited<ReturnType<typeof addPantryItem>>>
    
    export type AddPantryItemMutationError = unknown

    /**
 * @summary Add Pantry Item
 */
export const useAddPantryItem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPantryItem>>, TError,void, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof addPantryItem>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAddPantryItemMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Remove a pantry item
 * @summary Remove Pantry Item
 */
export const removePantryItem = (
    itemId: number,
 ) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/pantry/${itemId}`, method: 'DELETE'
    },
      );
    }
  


export const getRemovePantryItemMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removePantryItem>>, TError,{itemId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof removePantryItem>>, TError,{itemId: number}, TContext> => {
    
const mutationKey = ['removePantryItem'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removePantryItem>>, {itemId: number}> = (props) => {
          const {itemId} = props ?? {};

          return  removePantryItem(itemId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemovePantryItemMutationResult = NonNullable<Awaited<ReturnType<typeof removePantryItem>>>
    
    export type RemovePantryItemMutationError = HTTPValidationError

    /**
 * @summary Remove Pantry Item
 */
export const useRemovePantryItem = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removePantryItem>>, TError,{itemId: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof removePantryItem>>,
        TError,
        {itemId: number},
        TContext
      > => {

      const mutationOptions = getRemovePantryItemMutationOptions(options);

      return useMutation(mutationOptions );
    }
    