/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Bluby API
 * FastAPI backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get pantry items
 * @summary Get Pantry Items
 */
export const getPantryItemsV1PantryGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/pantry/`, method: 'GET', signal
    },
      );
    }
  

export const getGetPantryItemsV1PantryGetQueryKey = () => {
    return [`/v1/pantry/`] as const;
    }

    
export const getGetPantryItemsV1PantryGetQueryOptions = <TData = Awaited<ReturnType<typeof getPantryItemsV1PantryGet>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPantryItemsV1PantryGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPantryItemsV1PantryGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPantryItemsV1PantryGet>>> = ({ signal }) => getPantryItemsV1PantryGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPantryItemsV1PantryGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPantryItemsV1PantryGetQueryResult = NonNullable<Awaited<ReturnType<typeof getPantryItemsV1PantryGet>>>
export type GetPantryItemsV1PantryGetQueryError = unknown


/**
 * @summary Get Pantry Items
 */

export function useGetPantryItemsV1PantryGet<TData = Awaited<ReturnType<typeof getPantryItemsV1PantryGet>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPantryItemsV1PantryGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPantryItemsV1PantryGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Add a new pantry item
 * @summary Add Pantry Item
 */
export const addPantryItemV1PantryPost = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/pantry/`, method: 'POST', signal
    },
      );
    }
  


export const getAddPantryItemV1PantryPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPantryItemV1PantryPost>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addPantryItemV1PantryPost>>, TError,void, TContext> => {
    
const mutationKey = ['addPantryItemV1PantryPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPantryItemV1PantryPost>>, void> = () => {
          

          return  addPantryItemV1PantryPost()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddPantryItemV1PantryPostMutationResult = NonNullable<Awaited<ReturnType<typeof addPantryItemV1PantryPost>>>
    
    export type AddPantryItemV1PantryPostMutationError = unknown

    /**
 * @summary Add Pantry Item
 */
export const useAddPantryItemV1PantryPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPantryItemV1PantryPost>>, TError,void, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof addPantryItemV1PantryPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAddPantryItemV1PantryPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Remove a pantry item
 * @summary Remove Pantry Item
 */
export const removePantryItemV1PantryItemIdDelete = (
    itemId: number,
 ) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/pantry/${itemId}`, method: 'DELETE'
    },
      );
    }
  


export const getRemovePantryItemV1PantryItemIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removePantryItemV1PantryItemIdDelete>>, TError,{itemId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof removePantryItemV1PantryItemIdDelete>>, TError,{itemId: number}, TContext> => {
    
const mutationKey = ['removePantryItemV1PantryItemIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removePantryItemV1PantryItemIdDelete>>, {itemId: number}> = (props) => {
          const {itemId} = props ?? {};

          return  removePantryItemV1PantryItemIdDelete(itemId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemovePantryItemV1PantryItemIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof removePantryItemV1PantryItemIdDelete>>>
    
    export type RemovePantryItemV1PantryItemIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Remove Pantry Item
 */
export const useRemovePantryItemV1PantryItemIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removePantryItemV1PantryItemIdDelete>>, TError,{itemId: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof removePantryItemV1PantryItemIdDelete>>,
        TError,
        {itemId: number},
        TContext
      > => {

      const mutationOptions = getRemovePantryItemV1PantryItemIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    