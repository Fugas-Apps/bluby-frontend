/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Bluby API
 * Cloudflare Worker backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

/**
 * Retrieve operation for /v1/ingredients/
 * @summary Get ingredients
 */
export const getV1Ingredients = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/ingredients/`, method: 'GET', signal });
};

export const getGetV1IngredientsQueryKey = () => {
  return [`/v1/ingredients/`] as const;
};

export const getGetV1IngredientsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Ingredients>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Ingredients>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1IngredientsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Ingredients>>> = ({ signal }) =>
    getV1Ingredients(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Ingredients>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1IngredientsQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Ingredients>>>;
export type GetV1IngredientsQueryError = void;

/**
 * @summary Get ingredients
 */

export function useGetV1Ingredients<
  TData = Awaited<ReturnType<typeof getV1Ingredients>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Ingredients>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1IngredientsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/ingredients/
 * @summary Create ingredients
 */
export const postV1Ingredients = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/ingredients/`, method: 'POST', signal });
};

export const getPostV1IngredientsMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Ingredients>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Ingredients>>, TError, void, TContext> => {
  const mutationKey = ['postV1Ingredients'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Ingredients>>, void> = () => {
    return postV1Ingredients();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1IngredientsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1Ingredients>>
>;

export type PostV1IngredientsMutationError = void;

/**
 * @summary Create ingredients
 */
export const usePostV1Ingredients = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Ingredients>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Ingredients>>, TError, void, TContext> => {
  const mutationOptions = getPostV1IngredientsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/ingredients/:ingredientId
 * @summary Get specific ingredient
 */
export const getV1IngredientsIngredientId = (ingredientId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/ingredients/${ingredientId}`, method: 'GET', signal });
};

export const getGetV1IngredientsIngredientIdQueryKey = (ingredientId: number) => {
  return [`/v1/ingredients/${ingredientId}`] as const;
};

export const getGetV1IngredientsIngredientIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1IngredientsIngredientId>>,
  TError = void,
>(
  ingredientId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV1IngredientsIngredientId>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1IngredientsIngredientIdQueryKey(ingredientId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1IngredientsIngredientId>>> = ({
    signal,
  }) => getV1IngredientsIngredientId(ingredientId, signal);

  return { queryKey, queryFn, enabled: !!ingredientId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1IngredientsIngredientId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1IngredientsIngredientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1IngredientsIngredientId>>
>;
export type GetV1IngredientsIngredientIdQueryError = void;

/**
 * @summary Get specific ingredient
 */

export function useGetV1IngredientsIngredientId<
  TData = Awaited<ReturnType<typeof getV1IngredientsIngredientId>>,
  TError = void,
>(
  ingredientId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV1IngredientsIngredientId>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1IngredientsIngredientIdQueryOptions(ingredientId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
