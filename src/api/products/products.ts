/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Bluby API
 * FastAPI backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get products
 * @summary Get Products
 */
export const getProductsV1ProductsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/products/`, method: 'GET', signal
    },
      );
    }
  

export const getGetProductsV1ProductsGetQueryKey = () => {
    return [`/v1/products/`] as const;
    }

    
export const getGetProductsV1ProductsGetQueryOptions = <TData = Awaited<ReturnType<typeof getProductsV1ProductsGet>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProductsV1ProductsGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsV1ProductsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsV1ProductsGet>>> = ({ signal }) => getProductsV1ProductsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsV1ProductsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProductsV1ProductsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsV1ProductsGet>>>
export type GetProductsV1ProductsGetQueryError = unknown


/**
 * @summary Get Products
 */

export function useGetProductsV1ProductsGet<TData = Awaited<ReturnType<typeof getProductsV1ProductsGet>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProductsV1ProductsGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProductsV1ProductsGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new product
 * @summary Create Product
 */
export const createProductV1ProductsPost = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/products/`, method: 'POST', signal
    },
      );
    }
  


export const getCreateProductV1ProductsPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductV1ProductsPost>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createProductV1ProductsPost>>, TError,void, TContext> => {
    
const mutationKey = ['createProductV1ProductsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createProductV1ProductsPost>>, void> = () => {
          

          return  createProductV1ProductsPost()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProductV1ProductsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createProductV1ProductsPost>>>
    
    export type CreateProductV1ProductsPostMutationError = unknown

    /**
 * @summary Create Product
 */
export const useCreateProductV1ProductsPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductV1ProductsPost>>, TError,void, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof createProductV1ProductsPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreateProductV1ProductsPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get specific product
 * @summary Get Product
 */
export const getProductV1ProductsProductIdGet = (
    productId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/products/${productId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProductV1ProductsProductIdGetQueryKey = (productId: number,) => {
    return [`/v1/products/${productId}`] as const;
    }

    
export const getGetProductV1ProductsProductIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getProductV1ProductsProductIdGet>>, TError = HTTPValidationError>(productId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProductV1ProductsProductIdGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductV1ProductsProductIdGetQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductV1ProductsProductIdGet>>> = ({ signal }) => getProductV1ProductsProductIdGet(productId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductV1ProductsProductIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProductV1ProductsProductIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProductV1ProductsProductIdGet>>>
export type GetProductV1ProductsProductIdGetQueryError = HTTPValidationError


/**
 * @summary Get Product
 */

export function useGetProductV1ProductsProductIdGet<TData = Awaited<ReturnType<typeof getProductV1ProductsProductIdGet>>, TError = HTTPValidationError>(
 productId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProductV1ProductsProductIdGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProductV1ProductsProductIdGetQueryOptions(productId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



