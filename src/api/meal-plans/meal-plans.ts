/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Bluby API
 * FastAPI backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get meal plans
 * @summary Get Meal Plans
 */
export const getMealPlans = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/meal_plans/`, method: 'GET', signal
    },
      );
    }
  

export const getGetMealPlansQueryKey = () => {
    return [`/v1/meal_plans/`] as const;
    }

    
export const getGetMealPlansQueryOptions = <TData = Awaited<ReturnType<typeof getMealPlans>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMealPlans>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMealPlansQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMealPlans>>> = ({ signal }) => getMealPlans(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMealPlans>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMealPlansQueryResult = NonNullable<Awaited<ReturnType<typeof getMealPlans>>>
export type GetMealPlansQueryError = unknown


/**
 * @summary Get Meal Plans
 */

export function useGetMealPlans<TData = Awaited<ReturnType<typeof getMealPlans>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMealPlans>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMealPlansQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new meal plan
 * @summary Create Meal Plan
 */
export const createMealPlan = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/meal_plans/`, method: 'POST', signal
    },
      );
    }
  


export const getCreateMealPlanMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMealPlan>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createMealPlan>>, TError,void, TContext> => {
    
const mutationKey = ['createMealPlan'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMealPlan>>, void> = () => {
          

          return  createMealPlan()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMealPlanMutationResult = NonNullable<Awaited<ReturnType<typeof createMealPlan>>>
    
    export type CreateMealPlanMutationError = unknown

    /**
 * @summary Create Meal Plan
 */
export const useCreateMealPlan = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMealPlan>>, TError,void, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof createMealPlan>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreateMealPlanMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get specific meal plan
 * @summary Get Meal Plan
 */
export const getMealPlan = (
    planId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/meal_plans/${planId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetMealPlanQueryKey = (planId: number,) => {
    return [`/v1/meal_plans/${planId}`] as const;
    }

    
export const getGetMealPlanQueryOptions = <TData = Awaited<ReturnType<typeof getMealPlan>>, TError = HTTPValidationError>(planId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMealPlan>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMealPlanQueryKey(planId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMealPlan>>> = ({ signal }) => getMealPlan(planId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(planId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMealPlan>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMealPlanQueryResult = NonNullable<Awaited<ReturnType<typeof getMealPlan>>>
export type GetMealPlanQueryError = HTTPValidationError


/**
 * @summary Get Meal Plan
 */

export function useGetMealPlan<TData = Awaited<ReturnType<typeof getMealPlan>>, TError = HTTPValidationError>(
 planId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMealPlan>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMealPlanQueryOptions(planId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



