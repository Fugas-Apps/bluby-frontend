/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Bluby API
 * Cloudflare Worker backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

/**
 * Retrieve operation for /v1/groups/
 * @summary Get groups
 */
export const getV1Groups = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/groups/`, method: 'GET', signal });
};

export const getGetV1GroupsQueryKey = () => {
  return [`/v1/groups/`] as const;
};

export const getGetV1GroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Groups>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Groups>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1GroupsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Groups>>> = ({ signal }) =>
    getV1Groups(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Groups>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1GroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Groups>>>;
export type GetV1GroupsQueryError = void;

/**
 * @summary Get groups
 */

export function useGetV1Groups<
  TData = Awaited<ReturnType<typeof getV1Groups>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Groups>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1GroupsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/groups/
 * @summary Create groups
 */
export const postV1Groups = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/groups/`, method: 'POST', signal });
};

export const getPostV1GroupsMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Groups>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Groups>>, TError, void, TContext> => {
  const mutationKey = ['postV1Groups'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Groups>>, void> = () => {
    return postV1Groups();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1GroupsMutationResult = NonNullable<Awaited<ReturnType<typeof postV1Groups>>>;

export type PostV1GroupsMutationError = void;

/**
 * @summary Create groups
 */
export const usePostV1Groups = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Groups>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Groups>>, TError, void, TContext> => {
  const mutationOptions = getPostV1GroupsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/groups/:groupId
 * @summary Get specific group
 */
export const getV1GroupsGroupId = (groupId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/groups/${groupId}`, method: 'GET', signal });
};

export const getGetV1GroupsGroupIdQueryKey = (groupId: number) => {
  return [`/v1/groups/${groupId}`] as const;
};

export const getGetV1GroupsGroupIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GroupsGroupId>>,
  TError = void,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1GroupsGroupId>>, TError, TData>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1GroupsGroupIdQueryKey(groupId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1GroupsGroupId>>> = ({ signal }) =>
    getV1GroupsGroupId(groupId, signal);

  return { queryKey, queryFn, enabled: !!groupId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GroupsGroupId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1GroupsGroupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GroupsGroupId>>
>;
export type GetV1GroupsGroupIdQueryError = void;

/**
 * @summary Get specific group
 */

export function useGetV1GroupsGroupId<
  TData = Awaited<ReturnType<typeof getV1GroupsGroupId>>,
  TError = void,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1GroupsGroupId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1GroupsGroupIdQueryOptions(groupId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
