/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Bluby API
 * FastAPI backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get user groups
 * @summary Get Groups
 */
export const getGroupsV1GroupsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/groups/`, method: 'GET', signal
    },
      );
    }
  

export const getGetGroupsV1GroupsGetQueryKey = () => {
    return [`/v1/groups/`] as const;
    }

    
export const getGetGroupsV1GroupsGetQueryOptions = <TData = Awaited<ReturnType<typeof getGroupsV1GroupsGet>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getGroupsV1GroupsGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGroupsV1GroupsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupsV1GroupsGet>>> = ({ signal }) => getGroupsV1GroupsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGroupsV1GroupsGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetGroupsV1GroupsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getGroupsV1GroupsGet>>>
export type GetGroupsV1GroupsGetQueryError = unknown


/**
 * @summary Get Groups
 */

export function useGetGroupsV1GroupsGet<TData = Awaited<ReturnType<typeof getGroupsV1GroupsGet>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getGroupsV1GroupsGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetGroupsV1GroupsGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new group
 * @summary Create Group
 */
export const createGroupV1GroupsPost = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/groups/`, method: 'POST', signal
    },
      );
    }
  


export const getCreateGroupV1GroupsPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGroupV1GroupsPost>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createGroupV1GroupsPost>>, TError,void, TContext> => {
    
const mutationKey = ['createGroupV1GroupsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGroupV1GroupsPost>>, void> = () => {
          

          return  createGroupV1GroupsPost()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateGroupV1GroupsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createGroupV1GroupsPost>>>
    
    export type CreateGroupV1GroupsPostMutationError = unknown

    /**
 * @summary Create Group
 */
export const useCreateGroupV1GroupsPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGroupV1GroupsPost>>, TError,void, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof createGroupV1GroupsPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreateGroupV1GroupsPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get specific group
 * @summary Get Group
 */
export const getGroupV1GroupsGroupIdGet = (
    groupId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/groups/${groupId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetGroupV1GroupsGroupIdGetQueryKey = (groupId: number,) => {
    return [`/v1/groups/${groupId}`] as const;
    }

    
export const getGetGroupV1GroupsGroupIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getGroupV1GroupsGroupIdGet>>, TError = HTTPValidationError>(groupId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getGroupV1GroupsGroupIdGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGroupV1GroupsGroupIdGetQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupV1GroupsGroupIdGet>>> = ({ signal }) => getGroupV1GroupsGroupIdGet(groupId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGroupV1GroupsGroupIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetGroupV1GroupsGroupIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getGroupV1GroupsGroupIdGet>>>
export type GetGroupV1GroupsGroupIdGetQueryError = HTTPValidationError


/**
 * @summary Get Group
 */

export function useGetGroupV1GroupsGroupIdGet<TData = Awaited<ReturnType<typeof getGroupV1GroupsGroupIdGet>>, TError = HTTPValidationError>(
 groupId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getGroupV1GroupsGroupIdGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetGroupV1GroupsGroupIdGetQueryOptions(groupId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



