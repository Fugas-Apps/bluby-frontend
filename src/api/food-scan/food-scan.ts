/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Bluby API
 * Cloudflare Worker backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

/**
 * Create operation for /food_scan/scan
 * @summary Scan food image
 */
export const postFoodScanScan = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/food_scan/scan`, method: 'POST', signal });
};

export const getPostFoodScanScanMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFoodScanScan>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof postFoodScanScan>>, TError, void, TContext> => {
  const mutationKey = ['postFoodScanScan'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFoodScanScan>>, void> = () => {
    return postFoodScanScan();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostFoodScanScanMutationResult = NonNullable<
  Awaited<ReturnType<typeof postFoodScanScan>>
>;

export type PostFoodScanScanMutationError = void;

/**
 * @summary Scan food image
 */
export const usePostFoodScanScan = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFoodScanScan>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<Awaited<ReturnType<typeof postFoodScanScan>>, TError, void, TContext> => {
  const mutationOptions = getPostFoodScanScanMutationOptions(options);

  return useMutation(mutationOptions);
};
