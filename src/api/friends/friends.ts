/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Bluby API
 * Cloudflare Worker backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

/**
 * Retrieve operation for /v1/friends/
 * @summary Get friends
 */
export const getV1Friends = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/friends/`, method: 'GET', signal });
};

export const getGetV1FriendsQueryKey = () => {
  return [`/v1/friends/`] as const;
};

export const getGetV1FriendsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Friends>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Friends>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1FriendsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Friends>>> = ({ signal }) =>
    getV1Friends(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Friends>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1FriendsQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Friends>>>;
export type GetV1FriendsQueryError = void;

/**
 * @summary Get friends
 */

export function useGetV1Friends<
  TData = Awaited<ReturnType<typeof getV1Friends>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Friends>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1FriendsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/friends/request/:userId
 * @summary Send friend request
 */
export const postV1FriendsRequestUserId = (userId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/friends/request/${userId}`, method: 'POST', signal });
};

export const getPostV1FriendsRequestUserIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1FriendsRequestUserId>>,
    TError,
    { userId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1FriendsRequestUserId>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationKey = ['postV1FriendsRequestUserId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1FriendsRequestUserId>>,
    { userId: number }
  > = (props) => {
    const { userId } = props ?? {};

    return postV1FriendsRequestUserId(userId);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1FriendsRequestUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1FriendsRequestUserId>>
>;

export type PostV1FriendsRequestUserIdMutationError = void;

/**
 * @summary Send friend request
 */
export const usePostV1FriendsRequestUserId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1FriendsRequestUserId>>,
    TError,
    { userId: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postV1FriendsRequestUserId>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationOptions = getPostV1FriendsRequestUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/friends/requests
 * @summary Get friend requests
 */
export const getV1FriendsRequests = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/friends/requests`, method: 'GET', signal });
};

export const getGetV1FriendsRequestsQueryKey = () => {
  return [`/v1/friends/requests`] as const;
};

export const getGetV1FriendsRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1FriendsRequests>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1FriendsRequests>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1FriendsRequestsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1FriendsRequests>>> = ({ signal }) =>
    getV1FriendsRequests(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1FriendsRequests>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1FriendsRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1FriendsRequests>>
>;
export type GetV1FriendsRequestsQueryError = void;

/**
 * @summary Get friend requests
 */

export function useGetV1FriendsRequests<
  TData = Awaited<ReturnType<typeof getV1FriendsRequests>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1FriendsRequests>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1FriendsRequestsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
