/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Bluby API
 * FastAPI backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get friends list
 * @summary Get Friends
 */
export const getFriends = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/friends/`, method: 'GET', signal
    },
      );
    }
  

export const getGetFriendsQueryKey = () => {
    return [`/v1/friends/`] as const;
    }

    
export const getGetFriendsQueryOptions = <TData = Awaited<ReturnType<typeof getFriends>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFriends>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFriendsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFriends>>> = ({ signal }) => getFriends(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFriends>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFriendsQueryResult = NonNullable<Awaited<ReturnType<typeof getFriends>>>
export type GetFriendsQueryError = unknown


/**
 * @summary Get Friends
 */

export function useGetFriends<TData = Awaited<ReturnType<typeof getFriends>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFriends>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetFriendsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Send friend request
 * @summary Send Friend Request
 */
export const sendFriendRequest = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/friends/request/${userId}`, method: 'POST', signal
    },
      );
    }
  


export const getSendFriendRequestMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendFriendRequest>>, TError,{userId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof sendFriendRequest>>, TError,{userId: number}, TContext> => {
    
const mutationKey = ['sendFriendRequest'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendFriendRequest>>, {userId: number}> = (props) => {
          const {userId} = props ?? {};

          return  sendFriendRequest(userId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendFriendRequestMutationResult = NonNullable<Awaited<ReturnType<typeof sendFriendRequest>>>
    
    export type SendFriendRequestMutationError = HTTPValidationError

    /**
 * @summary Send Friend Request
 */
export const useSendFriendRequest = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendFriendRequest>>, TError,{userId: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof sendFriendRequest>>,
        TError,
        {userId: number},
        TContext
      > => {

      const mutationOptions = getSendFriendRequestMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get pending friend requests
 * @summary Get Friend Requests
 */
export const getFriendRequests = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/friends/requests`, method: 'GET', signal
    },
      );
    }
  

export const getGetFriendRequestsQueryKey = () => {
    return [`/v1/friends/requests`] as const;
    }

    
export const getGetFriendRequestsQueryOptions = <TData = Awaited<ReturnType<typeof getFriendRequests>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFriendRequests>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFriendRequestsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFriendRequests>>> = ({ signal }) => getFriendRequests(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFriendRequests>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFriendRequestsQueryResult = NonNullable<Awaited<ReturnType<typeof getFriendRequests>>>
export type GetFriendRequestsQueryError = unknown


/**
 * @summary Get Friend Requests
 */

export function useGetFriendRequests<TData = Awaited<ReturnType<typeof getFriendRequests>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFriendRequests>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetFriendRequestsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



