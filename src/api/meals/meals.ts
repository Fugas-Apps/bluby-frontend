/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Bluby API
 * FastAPI backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get user meals
 * @summary Get Meals
 */
export const getMeals = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/meals/`, method: 'GET', signal
    },
      );
    }
  

export const getGetMealsQueryKey = () => {
    return [`/v1/meals/`] as const;
    }

    
export const getGetMealsQueryOptions = <TData = Awaited<ReturnType<typeof getMeals>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeals>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMealsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeals>>> = ({ signal }) => getMeals(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeals>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMealsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeals>>>
export type GetMealsQueryError = unknown


/**
 * @summary Get Meals
 */

export function useGetMeals<TData = Awaited<ReturnType<typeof getMeals>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeals>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMealsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new meal
 * @summary Create Meal
 */
export const createMeal = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/meals/`, method: 'POST', signal
    },
      );
    }
  


export const getCreateMealMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMeal>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createMeal>>, TError,void, TContext> => {
    
const mutationKey = ['createMeal'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMeal>>, void> = () => {
          

          return  createMeal()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMealMutationResult = NonNullable<Awaited<ReturnType<typeof createMeal>>>
    
    export type CreateMealMutationError = unknown

    /**
 * @summary Create Meal
 */
export const useCreateMeal = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMeal>>, TError,void, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof createMeal>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreateMealMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get specific meal
 * @summary Get Meal
 */
export const getMeal = (
    mealId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/meals/${mealId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetMealQueryKey = (mealId: number,) => {
    return [`/v1/meals/${mealId}`] as const;
    }

    
export const getGetMealQueryOptions = <TData = Awaited<ReturnType<typeof getMeal>>, TError = HTTPValidationError>(mealId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeal>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMealQueryKey(mealId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeal>>> = ({ signal }) => getMeal(mealId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(mealId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeal>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMealQueryResult = NonNullable<Awaited<ReturnType<typeof getMeal>>>
export type GetMealQueryError = HTTPValidationError


/**
 * @summary Get Meal
 */

export function useGetMeal<TData = Awaited<ReturnType<typeof getMeal>>, TError = HTTPValidationError>(
 mealId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMeal>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMealQueryOptions(mealId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



