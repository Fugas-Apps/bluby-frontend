/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Bluby API
 * Cloudflare Worker backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

/**
 * Retrieve operation for /v1/meals/
 * @summary Get meals
 */
export const getV1Meals = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/meals/`, method: 'GET', signal });
};

export const getGetV1MealsQueryKey = () => {
  return [`/v1/meals/`] as const;
};

export const getGetV1MealsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Meals>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Meals>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1MealsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Meals>>> = ({ signal }) =>
    getV1Meals(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Meals>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1MealsQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Meals>>>;
export type GetV1MealsQueryError = void;

/**
 * @summary Get meals
 */

export function useGetV1Meals<
  TData = Awaited<ReturnType<typeof getV1Meals>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Meals>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1MealsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/meals/
 * @summary Create meals
 */
export const postV1Meals = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/meals/`, method: 'POST', signal });
};

export const getPostV1MealsMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Meals>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Meals>>, TError, void, TContext> => {
  const mutationKey = ['postV1Meals'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Meals>>, void> = () => {
    return postV1Meals();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1MealsMutationResult = NonNullable<Awaited<ReturnType<typeof postV1Meals>>>;

export type PostV1MealsMutationError = void;

/**
 * @summary Create meals
 */
export const usePostV1Meals = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Meals>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Meals>>, TError, void, TContext> => {
  const mutationOptions = getPostV1MealsMutationOptions(options);

  return useMutation(mutationOptions);
};
