/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Bluby API
 * Cloudflare Worker backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

/**
 * Retrieve operation for /v1/recipes/
 * @summary Get recipes
 */
export const getV1Recipes = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/recipes/`, method: 'GET', signal });
};

export const getGetV1RecipesQueryKey = () => {
  return [`/v1/recipes/`] as const;
};

export const getGetV1RecipesQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Recipes>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Recipes>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1RecipesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Recipes>>> = ({ signal }) =>
    getV1Recipes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Recipes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1RecipesQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Recipes>>>;
export type GetV1RecipesQueryError = void;

/**
 * @summary Get recipes
 */

export function useGetV1Recipes<
  TData = Awaited<ReturnType<typeof getV1Recipes>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Recipes>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1RecipesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create operation for /v1/recipes/
 * @summary Create recipes
 */
export const postV1Recipes = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/recipes/`, method: 'POST', signal });
};

export const getPostV1RecipesMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Recipes>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Recipes>>, TError, void, TContext> => {
  const mutationKey = ['postV1Recipes'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Recipes>>, void> = () => {
    return postV1Recipes();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1RecipesMutationResult = NonNullable<Awaited<ReturnType<typeof postV1Recipes>>>;

export type PostV1RecipesMutationError = void;

/**
 * @summary Create recipes
 */
export const usePostV1Recipes = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postV1Recipes>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Recipes>>, TError, void, TContext> => {
  const mutationOptions = getPostV1RecipesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve operation for /v1/recipes/:recipeId
 * @summary Get specific recipe
 */
export const getV1RecipesRecipeId = (recipeId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/recipes/${recipeId}`, method: 'GET', signal });
};

export const getGetV1RecipesRecipeIdQueryKey = (recipeId: number) => {
  return [`/v1/recipes/${recipeId}`] as const;
};

export const getGetV1RecipesRecipeIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1RecipesRecipeId>>,
  TError = void,
>(
  recipeId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1RecipesRecipeId>>, TError, TData>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1RecipesRecipeIdQueryKey(recipeId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1RecipesRecipeId>>> = ({ signal }) =>
    getV1RecipesRecipeId(recipeId, signal);

  return { queryKey, queryFn, enabled: !!recipeId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1RecipesRecipeId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1RecipesRecipeIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1RecipesRecipeId>>
>;
export type GetV1RecipesRecipeIdQueryError = void;

/**
 * @summary Get specific recipe
 */

export function useGetV1RecipesRecipeId<
  TData = Awaited<ReturnType<typeof getV1RecipesRecipeId>>,
  TError = void,
>(
  recipeId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1RecipesRecipeId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1RecipesRecipeIdQueryOptions(recipeId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
