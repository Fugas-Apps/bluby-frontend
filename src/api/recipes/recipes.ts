/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Bluby API
 * FastAPI backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get recipes
 * @summary Get Recipes
 */
export const getRecipesV1RecipesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/recipes/`, method: 'GET', signal
    },
      );
    }
  

export const getGetRecipesV1RecipesGetQueryKey = () => {
    return [`/v1/recipes/`] as const;
    }

    
export const getGetRecipesV1RecipesGetQueryOptions = <TData = Awaited<ReturnType<typeof getRecipesV1RecipesGet>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRecipesV1RecipesGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRecipesV1RecipesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecipesV1RecipesGet>>> = ({ signal }) => getRecipesV1RecipesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRecipesV1RecipesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRecipesV1RecipesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getRecipesV1RecipesGet>>>
export type GetRecipesV1RecipesGetQueryError = unknown


/**
 * @summary Get Recipes
 */

export function useGetRecipesV1RecipesGet<TData = Awaited<ReturnType<typeof getRecipesV1RecipesGet>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRecipesV1RecipesGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRecipesV1RecipesGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new recipe
 * @summary Create Recipe
 */
export const createRecipeV1RecipesPost = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/recipes/`, method: 'POST', signal
    },
      );
    }
  


export const getCreateRecipeV1RecipesPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRecipeV1RecipesPost>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createRecipeV1RecipesPost>>, TError,void, TContext> => {
    
const mutationKey = ['createRecipeV1RecipesPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRecipeV1RecipesPost>>, void> = () => {
          

          return  createRecipeV1RecipesPost()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateRecipeV1RecipesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createRecipeV1RecipesPost>>>
    
    export type CreateRecipeV1RecipesPostMutationError = unknown

    /**
 * @summary Create Recipe
 */
export const useCreateRecipeV1RecipesPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRecipeV1RecipesPost>>, TError,void, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof createRecipeV1RecipesPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreateRecipeV1RecipesPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get specific recipe
 * @summary Get Recipe
 */
export const getRecipeV1RecipesRecipeIdGet = (
    recipeId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/recipes/${recipeId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetRecipeV1RecipesRecipeIdGetQueryKey = (recipeId: number,) => {
    return [`/v1/recipes/${recipeId}`] as const;
    }

    
export const getGetRecipeV1RecipesRecipeIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getRecipeV1RecipesRecipeIdGet>>, TError = HTTPValidationError>(recipeId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRecipeV1RecipesRecipeIdGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRecipeV1RecipesRecipeIdGetQueryKey(recipeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecipeV1RecipesRecipeIdGet>>> = ({ signal }) => getRecipeV1RecipesRecipeIdGet(recipeId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(recipeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRecipeV1RecipesRecipeIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRecipeV1RecipesRecipeIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getRecipeV1RecipesRecipeIdGet>>>
export type GetRecipeV1RecipesRecipeIdGetQueryError = HTTPValidationError


/**
 * @summary Get Recipe
 */

export function useGetRecipeV1RecipesRecipeIdGet<TData = Awaited<ReturnType<typeof getRecipeV1RecipesRecipeIdGet>>, TError = HTTPValidationError>(
 recipeId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRecipeV1RecipesRecipeIdGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRecipeV1RecipesRecipeIdGetQueryOptions(recipeId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



