/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Bluby API
 * Cloudflare Worker backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

/**
 * Retrieve operation for /v1/preferences/
 * @summary Get preferences
 */
export const getV1Preferences = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/preferences/`, method: 'GET', signal });
};

export const getGetV1PreferencesQueryKey = () => {
  return [`/v1/preferences/`] as const;
};

export const getGetV1PreferencesQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Preferences>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Preferences>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1PreferencesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Preferences>>> = ({ signal }) =>
    getV1Preferences(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Preferences>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1PreferencesQueryResult = NonNullable<Awaited<ReturnType<typeof getV1Preferences>>>;
export type GetV1PreferencesQueryError = void;

/**
 * @summary Get preferences
 */

export function useGetV1Preferences<
  TData = Awaited<ReturnType<typeof getV1Preferences>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV1Preferences>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1PreferencesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update operation for /v1/preferences/
 * @summary Update preferences
 */
export const putV1Preferences = () => {
  return customInstance<void>({ url: `/v1/preferences/`, method: 'PUT' });
};

export const getPutV1PreferencesMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1Preferences>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof putV1Preferences>>, TError, void, TContext> => {
  const mutationKey = ['putV1Preferences'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putV1Preferences>>, void> = () => {
    return putV1Preferences();
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV1PreferencesMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV1Preferences>>
>;

export type PutV1PreferencesMutationError = void;

/**
 * @summary Update preferences
 */
export const usePutV1Preferences = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1Preferences>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<Awaited<ReturnType<typeof putV1Preferences>>, TError, void, TContext> => {
  const mutationOptions = getPutV1PreferencesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Create operation for /v1/preferences/
 * @summary Create preferences
 */
export const postV1Preferences = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/preferences/`, method: 'POST', signal });
};

export const getPostV1PreferencesMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Preferences>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof postV1Preferences>>, TError, void, TContext> => {
  const mutationKey = ['postV1Preferences'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1Preferences>>, void> = () => {
    return postV1Preferences();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1PreferencesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1Preferences>>
>;

export type PostV1PreferencesMutationError = void;

/**
 * @summary Create preferences
 */
export const usePostV1Preferences = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Preferences>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<Awaited<ReturnType<typeof postV1Preferences>>, TError, void, TContext> => {
  const mutationOptions = getPostV1PreferencesMutationOptions(options);

  return useMutation(mutationOptions);
};
