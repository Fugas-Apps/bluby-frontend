/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Bluby API
 * FastAPI backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get user preferences
 * @summary Get Preferences
 */
export const getPreferencesV1PreferencesGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/preferences/`, method: 'GET', signal
    },
      );
    }
  

export const getGetPreferencesV1PreferencesGetQueryKey = () => {
    return [`/v1/preferences/`] as const;
    }

    
export const getGetPreferencesV1PreferencesGetQueryOptions = <TData = Awaited<ReturnType<typeof getPreferencesV1PreferencesGet>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPreferencesV1PreferencesGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPreferencesV1PreferencesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPreferencesV1PreferencesGet>>> = ({ signal }) => getPreferencesV1PreferencesGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPreferencesV1PreferencesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPreferencesV1PreferencesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getPreferencesV1PreferencesGet>>>
export type GetPreferencesV1PreferencesGetQueryError = unknown


/**
 * @summary Get Preferences
 */

export function useGetPreferencesV1PreferencesGet<TData = Awaited<ReturnType<typeof getPreferencesV1PreferencesGet>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPreferencesV1PreferencesGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPreferencesV1PreferencesGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update user preferences
 * @summary Update Preferences
 */
export const updatePreferencesV1PreferencesPut = (
    
 ) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/preferences/`, method: 'PUT'
    },
      );
    }
  


export const getUpdatePreferencesV1PreferencesPutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePreferencesV1PreferencesPut>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updatePreferencesV1PreferencesPut>>, TError,void, TContext> => {
    
const mutationKey = ['updatePreferencesV1PreferencesPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePreferencesV1PreferencesPut>>, void> = () => {
          

          return  updatePreferencesV1PreferencesPut()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePreferencesV1PreferencesPutMutationResult = NonNullable<Awaited<ReturnType<typeof updatePreferencesV1PreferencesPut>>>
    
    export type UpdatePreferencesV1PreferencesPutMutationError = unknown

    /**
 * @summary Update Preferences
 */
export const useUpdatePreferencesV1PreferencesPut = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePreferencesV1PreferencesPut>>, TError,void, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof updatePreferencesV1PreferencesPut>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getUpdatePreferencesV1PreferencesPutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Create user preferences
 * @summary Create Preferences
 */
export const createPreferencesV1PreferencesPost = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/preferences/`, method: 'POST', signal
    },
      );
    }
  


export const getCreatePreferencesV1PreferencesPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPreferencesV1PreferencesPost>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createPreferencesV1PreferencesPost>>, TError,void, TContext> => {
    
const mutationKey = ['createPreferencesV1PreferencesPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPreferencesV1PreferencesPost>>, void> = () => {
          

          return  createPreferencesV1PreferencesPost()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePreferencesV1PreferencesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createPreferencesV1PreferencesPost>>>
    
    export type CreatePreferencesV1PreferencesPostMutationError = unknown

    /**
 * @summary Create Preferences
 */
export const useCreatePreferencesV1PreferencesPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPreferencesV1PreferencesPost>>, TError,void, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof createPreferencesV1PreferencesPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreatePreferencesV1PreferencesPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    