/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Bluby API
 * FastAPI backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get user preferences
 * @summary Get Preferences
 */
export const getPreferences = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/preferences/`, method: 'GET', signal
    },
      );
    }
  

export const getGetPreferencesQueryKey = () => {
    return [`/v1/preferences/`] as const;
    }

    
export const getGetPreferencesQueryOptions = <TData = Awaited<ReturnType<typeof getPreferences>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPreferences>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPreferencesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPreferences>>> = ({ signal }) => getPreferences(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPreferences>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPreferencesQueryResult = NonNullable<Awaited<ReturnType<typeof getPreferences>>>
export type GetPreferencesQueryError = unknown


/**
 * @summary Get Preferences
 */

export function useGetPreferences<TData = Awaited<ReturnType<typeof getPreferences>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPreferences>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPreferencesQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update user preferences
 * @summary Update Preferences
 */
export const updatePreferences = (
    
 ) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/preferences/`, method: 'PUT'
    },
      );
    }
  


export const getUpdatePreferencesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePreferences>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updatePreferences>>, TError,void, TContext> => {
    
const mutationKey = ['updatePreferences'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePreferences>>, void> = () => {
          

          return  updatePreferences()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePreferencesMutationResult = NonNullable<Awaited<ReturnType<typeof updatePreferences>>>
    
    export type UpdatePreferencesMutationError = unknown

    /**
 * @summary Update Preferences
 */
export const useUpdatePreferences = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePreferences>>, TError,void, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof updatePreferences>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getUpdatePreferencesMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Create user preferences
 * @summary Create Preferences
 */
export const createPreferences = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/preferences/`, method: 'POST', signal
    },
      );
    }
  


export const getCreatePreferencesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPreferences>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createPreferences>>, TError,void, TContext> => {
    
const mutationKey = ['createPreferences'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPreferences>>, void> = () => {
          

          return  createPreferences()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePreferencesMutationResult = NonNullable<Awaited<ReturnType<typeof createPreferences>>>
    
    export type CreatePreferencesMutationError = unknown

    /**
 * @summary Create Preferences
 */
export const useCreatePreferences = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPreferences>>, TError,void, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof createPreferences>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreatePreferencesMutationOptions(options);

      return useMutation(mutationOptions );
    }
    