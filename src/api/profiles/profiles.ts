/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Bluby API
 * Cloudflare Worker backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././mutator/custom-instance';

/**
 * Retrieve operation for /v1/profiles/:userId
 * @summary Get a user profile by ID
 */
export const getV1ProfilesUserId = (userId: number, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/v1/profiles/${userId}`, method: 'GET', signal });
};

export const getGetV1ProfilesUserIdQueryKey = (userId: number) => {
  return [`/v1/profiles/${userId}`] as const;
};

export const getGetV1ProfilesUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1ProfilesUserId>>,
  TError = void,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1ProfilesUserId>>, TError, TData>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1ProfilesUserIdQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1ProfilesUserId>>> = ({ signal }) =>
    getV1ProfilesUserId(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1ProfilesUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetV1ProfilesUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ProfilesUserId>>
>;
export type GetV1ProfilesUserIdQueryError = void;

/**
 * @summary Get a user profile by ID
 */

export function useGetV1ProfilesUserId<
  TData = Awaited<ReturnType<typeof getV1ProfilesUserId>>,
  TError = void,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getV1ProfilesUserId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetV1ProfilesUserIdQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Partially update operation for /v1/profiles/:userId
 * @summary Update a user profile
 */
export const patchV1ProfilesUserId = (userId: number) => {
  return customInstance<void>({ url: `/v1/profiles/${userId}`, method: 'PATCH' });
};

export const getPatchV1ProfilesUserIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchV1ProfilesUserId>>,
    TError,
    { userId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchV1ProfilesUserId>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationKey = ['patchV1ProfilesUserId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchV1ProfilesUserId>>,
    { userId: number }
  > = (props) => {
    const { userId } = props ?? {};

    return patchV1ProfilesUserId(userId);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchV1ProfilesUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchV1ProfilesUserId>>
>;

export type PatchV1ProfilesUserIdMutationError = void;

/**
 * @summary Update a user profile
 */
export const usePatchV1ProfilesUserId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchV1ProfilesUserId>>,
    TError,
    { userId: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchV1ProfilesUserId>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationOptions = getPatchV1ProfilesUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};
