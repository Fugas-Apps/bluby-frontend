/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Bluby API
 * FastAPI backend for the BlubyAI application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  ProfileUpdate,
  SuccessResponseProfileDetails
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Get a user profile by ID
 * @summary Get Profile
 */
export const getProfileV1ProfilesUserIdGet = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<SuccessResponseProfileDetails>(
      {url: `/v1/profiles/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProfileV1ProfilesUserIdGetQueryKey = (userId: number,) => {
    return [`/v1/profiles/${userId}`] as const;
    }

    
export const getGetProfileV1ProfilesUserIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getProfileV1ProfilesUserIdGet>>, TError = HTTPValidationError>(userId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProfileV1ProfilesUserIdGet>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfileV1ProfilesUserIdGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileV1ProfilesUserIdGet>>> = ({ signal }) => getProfileV1ProfilesUserIdGet(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProfileV1ProfilesUserIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProfileV1ProfilesUserIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProfileV1ProfilesUserIdGet>>>
export type GetProfileV1ProfilesUserIdGetQueryError = HTTPValidationError


/**
 * @summary Get Profile
 */

export function useGetProfileV1ProfilesUserIdGet<TData = Awaited<ReturnType<typeof getProfileV1ProfilesUserIdGet>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProfileV1ProfilesUserIdGet>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProfileV1ProfilesUserIdGetQueryOptions(userId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a user profile
 * @summary Update Profile
 */
export const updateProfileV1ProfilesUserIdPatch = (
    userId: number,
    profileUpdate: ProfileUpdate,
 ) => {
      
      
      return customInstance<SuccessResponseProfileDetails>(
      {url: `/v1/profiles/${userId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: profileUpdate
    },
      );
    }
  


export const getUpdateProfileV1ProfilesUserIdPatchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProfileV1ProfilesUserIdPatch>>, TError,{userId: number;data: ProfileUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateProfileV1ProfilesUserIdPatch>>, TError,{userId: number;data: ProfileUpdate}, TContext> => {
    
const mutationKey = ['updateProfileV1ProfilesUserIdPatch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProfileV1ProfilesUserIdPatch>>, {userId: number;data: ProfileUpdate}> = (props) => {
          const {userId,data} = props ?? {};

          return  updateProfileV1ProfilesUserIdPatch(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProfileV1ProfilesUserIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateProfileV1ProfilesUserIdPatch>>>
    export type UpdateProfileV1ProfilesUserIdPatchMutationBody = ProfileUpdate
    export type UpdateProfileV1ProfilesUserIdPatchMutationError = HTTPValidationError

    /**
 * @summary Update Profile
 */
export const useUpdateProfileV1ProfilesUserIdPatch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProfileV1ProfilesUserIdPatch>>, TError,{userId: number;data: ProfileUpdate}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateProfileV1ProfilesUserIdPatch>>,
        TError,
        {userId: number;data: ProfileUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateProfileV1ProfilesUserIdPatchMutationOptions(options);

      return useMutation(mutationOptions );
    }
    